{"ast":null,"code":"var _jsxFileName = \"/Users/abhinavprasad/Desktop/ai-face-detection/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport * as faceapi from \"face-api.js\";\nimport { FaceExpressions } from 'face-api.js';\nimport $ from 'jquery'; // new faceapi.TinyFaceDetectorOptions()\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let number = 0;\n  let client_id = '42637a421e564dffacf392cd0fef3df6';\n  let client_Secret = '9fba64c6a89d45539af2fe64ac3fc37c';\n  const [accessToken, setaccessToken] = useState(\"\");\n  const videoRef = useRef();\n  const canvasRef = useRef();\n  useEffect(() => {\n    var auth_params = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: 'grant_type=client_credentials&client_id=' + client_id + '&client_secret=' + client_Secret\n    };\n    fetch('https:/accounts.spotify.com/api/token', auth_params).then(result => result.json()).then(data => setaccessToken(data.access_token)); // .then(data => console.log(data))\n  }, []);\n  useEffect(() => {\n    startVideo();\n    videoRef && loadModels();\n  }, []);\n\n  const loadModels = () => {\n    Promise.all([faceapi.nets.tinyFaceDetector.loadFromUri('/models'), faceapi.nets.faceLandmark68Net.loadFromUri('/models'), faceapi.nets.faceRecognitionNet.loadFromUri('/models'), faceapi.nets.faceExpressionNet.loadFromUri('/models')]).then(() => {\n      faceDetection();\n    });\n  };\n\n  const startVideo = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(currentStream => {\n      videoRef.current.srcObject = currentStream;\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const faceDetection = async () => {\n    setInterval(async () => {\n      if (number == 1) {\n        return;\n      }\n\n      const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n      let emotions_displayed = detections[0].expressions;\n\n      if (emotions_displayed != undefined) {\n        number++;\n      }\n\n      let max_emotion = 0;\n      let final_emotion = \"\";\n\n      for (const [key, value] of Object.entries(emotions_displayed)) {\n        if (value > max_emotion) {\n          max_emotion = value;\n          final_emotion = key;\n        }\n      }\n\n      console.log(final_emotion + ':' + max_emotion);\n      canvasRef.current.innerHtml = faceapi.createCanvasFromMedia(videoRef.current);\n      faceapi.matchDimensions(canvasRef.current, {\n        width: 940,\n        height: 650\n      });\n      const resized = faceapi.resizeResults(detections, {\n        width: 940,\n        height: 650\n      });\n      faceapi.draw.drawDetections(canvasRef.current, resized);\n      faceapi.draw.drawFaceLandmarks(canvasRef.current, resized);\n      faceapi.draw.drawFaceExpressions(canvasRef.current, resized);\n      let number_of_playlists = 5;\n      let selected_playlist = Math.floor(Math.random() * number_of_playlists);\n      var search_params = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + accessToken\n        }\n      };\n      var get_playlist = await fetch('\thttps://api.spotify.com/v1/search?q=' + max_emotion + '&type=playlist&limit=5', search_params).then(response => response.json()).then(data => console.log(data)); // fetch(\"https://api.spotify.com/v1/search?q=\" + final_emotion + \"&type=playlist&limit=5\", {\n      //   method: 'GET',\n      // })\n      // fetch(\"https://api.spotify.com/v1/search?q=\" + final_emotion + \"&type=playlist&limit=5\")\n      // $.get(\"https://api.spotify.com/v1/search?q=\" + final_emotion + \"&type=playlist&limit=5\", function(data) {\n      //                           console.log(data)\n      //                           // playlist = data.playlists.items[selectedPlaylist].external_urls.spotify;\n      //                           // window.open(playlist, '_blank');\n      //                       })\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" AI FACE DETECTION\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__video\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        crossOrigin: \"anonymous\",\n        ref: videoRef,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"940\",\n      height: \"650\",\n      className: \"app__canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"UY/MGjCCnpA5mx+v40vUdg0Q7iA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/abhinavprasad/Desktop/ai-face-detection/src/App.js"],"names":["useRef","useEffect","useState","faceapi","FaceExpressions","$","App","number","client_id","client_Secret","accessToken","setaccessToken","videoRef","canvasRef","auth_params","method","headers","body","fetch","then","result","json","data","access_token","startVideo","loadModels","Promise","all","nets","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","faceDetection","navigator","mediaDevices","getUserMedia","video","currentStream","current","srcObject","catch","err","console","error","setInterval","detections","detectAllFaces","TinyFaceDetectorOptions","withFaceLandmarks","withFaceExpressions","emotions_displayed","expressions","undefined","max_emotion","final_emotion","key","value","Object","entries","log","innerHtml","createCanvasFromMedia","matchDimensions","width","height","resized","resizeResults","draw","drawDetections","drawFaceLandmarks","drawFaceExpressions","number_of_playlists","selected_playlist","Math","floor","random","search_params","get_playlist","response"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState } from 'react';\nimport './App.css';\nimport * as faceapi from \"face-api.js\";\nimport { FaceExpressions } from 'face-api.js';\nimport $ from 'jquery';\n\n// new faceapi.TinyFaceDetectorOptions()\n\nfunction App() {\n\n  let number = 0;\n  let client_id = '42637a421e564dffacf392cd0fef3df6';\n  let client_Secret = '9fba64c6a89d45539af2fe64ac3fc37c';\n  const [accessToken, setaccessToken] = useState(\"\")\n\n  const videoRef = useRef();\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    \n    var auth_params = {\n      method: 'POST',\n      headers: {\n        'Content-Type' : 'application/x-www-form-urlencoded'\n      },\n      body: 'grant_type=client_credentials&client_id=' + client_id + '&client_secret=' + client_Secret\n    }\n    fetch('https:/accounts.spotify.com/api/token', auth_params)\n    .then(result => result.json())\n    .then(data => setaccessToken(data.access_token))\n    // .then(data => console.log(data))\n\n  },[])\n\n  \n\n  useEffect(() => {\n    startVideo();\n\n    videoRef && loadModels();\n\n  }, []);\n  \n    const loadModels = () => {\n      Promise.all([\n        faceapi.nets.tinyFaceDetector.loadFromUri('/models'),\n        faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\n        faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\n        faceapi.nets.faceExpressionNet.loadFromUri('/models'),\n      ]).then(() => {\n        faceDetection();\n      })\n    };\n\n  const startVideo = () => {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((currentStream) => {\n        videoRef.current.srcObject = currentStream;\n      })\n      .catch((err) => {\n        console.error(err)\n      });\n  }\n\n  const faceDetection = async () => {\n    setInterval(async() => {\n      if (number==1)\n      {\n        return\n      }\n      const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n      let emotions_displayed = detections[0].expressions;\n      if (emotions_displayed != undefined)\n      {\n        number++;\n      }\n      let max_emotion = 0\n      let final_emotion = \"\"\n      for (const [key,value] of Object.entries(emotions_displayed))\n      {\n        if (value > max_emotion)\n        {\n          max_emotion = value\n          final_emotion = key\n        }\n      }\n      console.log(final_emotion + ':' + max_emotion)\n  \n      canvasRef.current.innerHtml = faceapi.createCanvasFromMedia(videoRef.current);\n      faceapi.matchDimensions(canvasRef.current, {\n        width: 940,\n        height: 650,\n      })\n\n      const resized = faceapi.resizeResults(detections, {\n        width: 940,\n        height: 650,\n      });\n\n      faceapi.draw.drawDetections(canvasRef.current, resized)\n      faceapi.draw.drawFaceLandmarks(canvasRef.current, resized)\n      faceapi.draw.drawFaceExpressions(canvasRef.current, resized)\n\n      let number_of_playlists = 5\n      let selected_playlist = Math.floor(Math.random() * number_of_playlists)\n\n      var search_params = {\n          method: 'GET',\n          headers: {\n            'Content-Type' : 'application/json',\n            'Authorization' : 'Bearer ' + accessToken\n          }\n      }\n    \n        var get_playlist = await fetch('\thttps://api.spotify.com/v1/search?q=' + max_emotion + '&type=playlist&limit=5', search_params)\n        .then(response => response.json())\n        .then(data => console.log(data))\n      \n\n      // fetch(\"https://api.spotify.com/v1/search?q=\" + final_emotion + \"&type=playlist&limit=5\", {\n      //   method: 'GET',\n\n      // })\n\n      // fetch(\"https://api.spotify.com/v1/search?q=\" + final_emotion + \"&type=playlist&limit=5\")\n\n      // $.get(\"https://api.spotify.com/v1/search?q=\" + final_emotion + \"&type=playlist&limit=5\", function(data) {\n      //                           console.log(data)\n      //                           // playlist = data.playlists.items[selectedPlaylist].external_urls.spotify;\n      //                           // window.open(playlist, '_blank');\n      //                       })\n\n    }, 1000)\n  }\n\n  return (\n    <div  className=\"app\">\n      <h1> AI FACE DETECTION</h1>\n      <h1>  </h1>\n      <div className='app__video'>\n        <video crossOrigin='anonymous' ref={videoRef} autoPlay ></video>\n      </div>\n        <canvas ref={canvasRef} width=\"940\" height=\"650\" className='app__canvas' />\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}